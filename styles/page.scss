@mixin min($bp, $max: "null", $device: "screen") {
    @if $max == "null" {
      @media only #{$device} and (min-width: #{$bp}) {
        @content;
      }
    } @else {
      @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
        @content;
      }
    }
  }
  
  @function bp($bp) {
    @return map-get($breakpoints, $bp);
  }
  
  $breakpoints: (
    na: 0px,
    // For BS grid
      xs: 320px,
    // Smartphone
      sm: 600px,
    // Tablets
      md: 900px,
    // Tablets Landscape and small desktops
      lg: 1200px,
    // Desktops
      xl: 1800px,
    // Large Desktop
  );
  
  @function container($container-size, $true-val: false) {
    @return map-get($container-sizes, $container-size);
  }
  
  $container-sizes: (
    na: 95vw,
    lg: 75rem,
  );
  
  main {
    padding-right: 1rem;
    padding-left: 1rem;
  
    &:not(.is-fluid) {
      margin: 0 auto;
  
      @each $bp, $container-size in $container-sizes {
        @include min(#{bp(#{$bp})}) {
          width: container(#{$bp});
        }
      }
    }
  }

.index-container {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
}

.schedule-parent {
    width: min(30rem, 95vw);
    margin: 0 2rem;
    display: inline-block;
}

.podcast-holder {
  white-space: nowrap;
  margin: 2rem auto;
  flex-direction: row;
  flex-wrap: wrap;
  display: flex;
  justify-content: space-around;
}


@media (min-width: 600px){
  .podcast-holder {
    max-width: 95vw;
    overflow: scroll hidden;
    white-space: nowrap;
    margin: 2rem auto;
  }
}

.podcast-holder.full {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  height: auto;
  overflow: inherit;
}
